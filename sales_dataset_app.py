# -*- coding: utf-8 -*-
"""Sales_Dataset_App.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18Eqvtr4wa9umZxJu1ccLHwCtLowBmvmZ
"""

# !pip install -q streamlit
# !npm install localtunnel
# !pip install --upgrade pip
# !pip install --upgrade pip setuptools wheel

SKLEARN_ALLOW_DEPRECATED_SKLEARN_PACKAGE_INSTALL=True

# Core Pkgs
import sklearn
import streamlit as st
import scipy
import scipy.stats
import itertools
import pickle

# Importing Libraries for EDA
import pandas as pd
import numpy as np


# Importing Libraries for Data Visualisation
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use("Agg")
import seaborn as sns

def main():
  activities = ["EDA", "Plots", "ML"]
  choice = st.sidebar.selectbox("Select Activities", activities)

  if choice == "EDA":
    st.subheader("EDA")
    data = st.file_uploader("Upload a Dataset", type = ["csv"])


    if data is not None:
      df = pd.read_csv(data)
      df = df.loc[:, ~df.columns.str.contains('^Unnamed')]
      st.dataframe(df.head())

      if st.checkbox("Show Datatypes"):
        st.write(df.dtypes)

      if st.checkbox("Show Shape"):
        st.write(df.shape)

      if st.checkbox("Show Columns"):
        all_columns = df.columns.to_list()
        st.write(all_columns)

      if st.checkbox("Summary"):
        st.write(df.describe())

      if st.checkbox("Short Information"):
        st.write(df.info())

      if st.checkbox("Show Selected Columns"):
        selected_columns = st.multiselect("Select Columns", df.columns.to_list())
        new_df = df[selected_columns]
        st.dataframe(new_df)

      if st.checkbox("Value Counts"):
        selected_columns = st.selectbox("Select Columns", df.columns.to_list())
        new_df = df[selected_columns].value_counts()
        new_df

      if st.checkbox("Correlation Plot(Seaborn)"):
        st.write(sns.heatmap(df.corr(),annot=True, cmap = "coolwarm"))
        st.pyplot()

      if st.checkbox("Pie Plot"):
        all_columns = df.columns.to_list()
        column_to_plot = st.selectbox("Select 1 Column",all_columns)
        pie_plot = df[column_to_plot].value_counts().plot.pie(autopct="%1.1f%%", wedgeprops = {"edgecolor" : "black", 'linewidth': 1, 'antialiased': True})
        st.write(pie_plot)
        st.pyplot()

  elif choice == "Plots":
    st.subheader("Data Visualization")
    data = st.file_uploader("Upload a Dataset", type = ["csv"])

    if data is not None:
      df = pd.read_csv(data)
      df = df.loc[:, ~df.columns.str.contains('^Unnamed')]
      st.dataframe(df.head())

      if st.checkbox("Show Value Counts"):
        selected_columns = st.selectbox("Select Columns", df.columns.to_list())
        st.write(df[selected_columns].value_counts().plot(kind = "bar"))
        st.pyplot()

# Customizable Plot

      all_columns_names = df.columns.tolist()
      type_of_plot = st.selectbox("Select Type of Plot",["area","bar","line","hist","box","kde"])
      selected_columns_names = st.multiselect("Select Columns To Plot",all_columns_names)

      if st.button("Generate Plot"):
        st.success("Generating Customizable Plot of {} for {}".format(type_of_plot,selected_columns_names))

# Plot By Streamlit
        if type_of_plot == 'area':
          cust_data = df[selected_columns_names].value_counts().plot(kind = "area")
          st.write(cust_data)
          st.pyplot()

        elif type_of_plot == 'bar':
          cust_data = df[selected_columns_names].value_counts().plot(kind = "bar")
          st.write(cust_data)
          st.pyplot()

        elif type_of_plot == 'line':
          cust_data = df[selected_columns_names].value_counts().plot(kind = "line")
          st.write(cust_data)
          st.pyplot()

# Custom Plot
        elif type_of_plot:
          cust_plot= df[selected_columns_names].plot(kind=type_of_plot)
          st.write(cust_plot)
          st.pyplot()


  elif choice == "ML":
    st.subheader("ML Web App")
    data = st.file_uploader("Upload a Dataset", type = ["csv"])

    if data is not None:
      df = pd.read_csv(data)
      df = df.loc[:, ~df.columns.str.contains('^Unnamed')]
      st.dataframe(df.head())


      customer_name = st.selectbox("Select Customer Name", options = df["Customer Name"].unique())
      st.write(customer_name)

      city = st.selectbox("Select City", options = df["City"].unique())
      st.write(city)

      country = st.selectbox("Select Country", options = df["Country"].unique())
      st.write(country)

      region = st.selectbox("Select Region", options = df["Region"].unique())
      st.write(region)

      segment = st.selectbox("Select Segment", options = df["Segment"].unique())
      st.write(segment)

      ship_mode = st.selectbox("Select Ship Mode", options = df["Ship Mode"].unique())
      st.write(ship_mode)

      state = st.selectbox("Select State", options = df["State"].unique())
      st.write(state)

      product = st.selectbox("Select Product", options = df["Product Name"].unique())
      st.write(product)

      discount = st.slider('Select Discount', 0.0, 100.0, step = 1.0)
      st.write(discount)

      sales = st.slider('Select Sales Amount', 0.0, 10000.0, step = 1.0)
      st.write(sales)

      quantity = st.slider('Select Quantity', 0.0, 10000.0, step = 1.0)
      st.write(quantity)

      category = st.selectbox("Select Category", options = df["Category"].unique())
      st.write(category)

      sub_category = st.selectbox("Select Sub-Category", options = df["Sub-Category"].unique())
      st.write(sub_category)


      test  = [[customer_name, city, country, region, segment, ship_mode, state,
                product, discount, sales, quantity, category, sub_category]]
      st.write('Test_Data', test)


      if st.button('Predict', key = "int"):
        input_data = {"Customer Name": [customer_name],
                      "City":[city],
                      'Country': [country],
                      'Region': [region],
                      'Segment': [segment],
                      'Ship Mode': [ship_mode],
                      'State': [state],
                      "Product Name": [product],
                      "Discount":[discount],
                      'Sales': [sales],
                      'Quantity': [quantity],
                      "Category": [category],
                      "Sub-Category": [sub_category]}

        input_df = pd.DataFrame(input_data)

        # Update the file path to reflect the correct location in Streamlit cloud
        pkl_file_path = "pipeline_model.pkl"

        # Load the pickle file
        with open(pkl_file_path, "rb") as file:
          pipeline = pickle.load(file)


        predictions = pipeline.predict(input_df)
        st.success(predictions)


        # if predictions > 0:
        #   st.success("Profit: ", predictions)
        # else:
        #   st.success("Loss: ", predictions)



if __name__ == "__main__":
    main()







